#! /usr/bin/env python

import yaml,logging
import sys,os
import numpy as np
from txtreader import Txtreader

logger = logging.getLogger(__name__)



class Reader2d():
  '''  Class for reading umbrella sampling input
  '''

  def __init__(self,infile='Proj.yaml'):
    
    if not os.path.isfile(infile):
        raise SystemExit("projectfile {0} not found ... Exiting !\n".format(infile))
    inpf=open(infile,'r')
    records=yaml.load(inpf)
    #print records
    self.trials=records['trials']
    self.systems=records['systems']    
    self.positions=records['positions']
    self.angles=records['angles']
    self.x0=records['x0']
    self.kx=records['kx']
    self.y0=records['y0']
    self.ky=records['ky']
    
    if len(self.x0) != len(self.kx):
        raise SystemExit("x0 {0} and kx {1} of different size".format(len(self.x0), len(self.kx))) 
    if len(self.y0) != len(self.ky):
        raise SystemExit("y0 {0} and ky {1} of different size".format(len(self.y0), len(self.ky)))
     
    self.xvgsuffix=records['xvgsuffix']
    self.xtcsuffix=records['xtcsuffix']
    self.xvgdir=records['xvgdir']
    self.xtcdir=records['xtcdir']
    self.stride=records['stride']
    logger.info("%s file sucessfully loaded",infile)
    logger.info("positions: %d Angles: %d ",len(self.positions),
                     len(self.angles))
    self.xvgfiles,self.xtcfiles = self._genxvgandxtcnames()
    
    
    
  def read_xvgfiles(self,readupto=0,btime=False):
    ''' 
    Read umbrella output files generated by gromacs.
    Arguments:
        readupto: int 
            lines to read upto
        skipline: int
            skip every nth line
        btime: boolean
            whether to return time column
    Returns:
        pos_kn: 2D array, with each file enteries as row 
        N_k: Number of rows in each file
    '''
    trials=self.trials
    systems=self.systems
    positions=self.positions
    angles=self.angles
    pos_kn=[]
    N_k=[]
    for infile in self.xvgfiles:
        if not os.path.isfile(infile):
            raise SystemExit("file {0} not found\n".format(infile))
        
        data=Txtreader(infile)
        data.readcols(readupto=readupto,skipline=self.stride)
        N_k.append(data.cols.shape[0])
        pos_kn.append(data.cols[:,:3])
    N_k=np.array(N_k)
    N_max=np.max(N_k)
    logger.debug("N_max %d ",N_max)
    logger.debug("N_k %s",N_k )
    
    pos_xkn=np.zeros((len(pos_kn),N_max),dtype=np.float32)
    pos_ykn=np.zeros((len(pos_kn),N_max),dtype=np.float32)
    timestamp_kn=np.zeros((len(pos_kn),N_max),dtype=np.float32)
    for i,d in enumerate(pos_kn):
      timestamp_kn[i,0:N_k[i]]=d[:,0]
      pos_xkn[i,0:N_k[i]]=d[:,1]
      pos_ykn[i,0:N_k[i]]=d[:,2]
    logger.debug("pos_xkn.shape %s",pos_xkn.shape )
    
    if btime == False:
        return pos_xkn,pos_ykn,N_k
    else:
       return pos_xkn,pos_ykn,N_k,timestamp_kn
   
  def _genxvgandxtcnames(self):
    xvgfiles = []
    xtcfiles = []   
    for trial in self.trials:
      for system in self.systems:
        for pos in self.positions:
            for angl in self.angles:
                xvgfile=("%s/%s_%s_%s_%s_%s.xvg"%(self.xvgdir,trial,system,
                                                 pos,angl,self.xvgsuffix))
                xtcfile=("%s/%s_%s_%s_%s_%s.xtc"%(self.xtcdir,trial,system,
                                                 pos,angl,self.xtcsuffix))
                xvgfiles.append(xvgfile)
                xtcfiles.append(xtcfile)
    return xvgfiles,xtcfiles

