#! /usr/bin/env python

import yaml,logging
import sys,os
import numpy as np
from txtreader import Txtreader

logger = logging.getLogger(__name__)



class ReaderNd():
    ''' Class for reading Ndimensional umbrella sampling input
    '''

    def __init__(self,infile='Proj.yaml'):
      
        if not os.path.isfile(infile):
            raise SystemExit("projectfile {0} not found ... Exiting !\n".format(infile))
        inpf=open(infile,'r')
        records=yaml.load(inpf)
        #print records
        self.trials=records['trials']
        self.systems=records['systems']
        self.collvars=records['collvars']
        self.vardict={}
        for i in self.collvars:
            j = i+'_fc'
            k = i+'_x0'
            self.vardict[i] = records[i]
            self.vardict[j] = records[j]
            self.vardict[k] = records[k]
            
            if len(records[i]) != len(records[j]):
                raise SystemExit("%s and %s of different size".format(i,j)) 
         
        self.xvgsuffix=records['xvgsuffix']
        self.xtcsuffix=records['xtcsuffix']
        self.xvgdir=records['xvgdir']
        self.xtcdir=records['xtcdir']
        self.stride=records['stride']
        self.biasType=records["bias"]
        
        if len(self.biasType) != len(self.collvars):
            raise SystemExit("number of collvars and bias are different .. Exiting")
        
        logger.info("%s file sucessfully loaded",infile)
        self.xvgfiles,self.xtcfiles = self._genxvgandxtcnames()
    
    
    
    def read_xvgfiles(self,readupto=0,btime=False):
        '''  Read umbrella output files generated by gromacs.
        
        Parameters
        ------------
            readupto: int 
                lines to read upto
            skipline: int
                skip every nth line
            btime: boolean
                whether to return time column
        Returns
        ---------
            observ: list of array
            
        Note: Format of the file "time var1 var2 var3 ..." 
        '''
        observ = []
        for infile in self.xvgfiles:
            if not os.path.isfile(infile):
                raise SystemExit("file {0} not found\n".format(infile))
            
            data=Txtreader(infile)
            data.readcols(readupto=readupto,skipline=self.stride)
            
            if (data.cols.shape[1] != len(self.collvars) + 1):
                errstr = "%s col expected but %s found %s"%(infile,len(self.collvars) + 1,data.cols.shape[1])
                raise SystemExit(errstr)
             
            if not btime:
                observ.append(data.cols[:,1:])
            else:
                observ.append(data.cols)
                
        return observ
   
    def _genxvgandxtcnames(self):
        ''' no doc string
        '''
        xvgfiles = []
        xtcfiles = []
        collvar_str = self._gen_colvarstr()   
        for trial in self.trials:
            for system in self.systems:
                for colvar in collvar_str:
                    xvgfile=("%s/%s_%s_%s_%s.xvg"%(self.xvgdir,trial,system,colvar,self.xvgsuffix))
                    xtcfile=("%s/%s_%s_%s_%s.xtc"%(self.xtcdir,trial,system,colvar,self.xtcsuffix))
                    xvgfiles.append(xvgfile)
                    xtcfiles.append(xtcfile)

        return xvgfiles,xtcfiles
    
    def _gen_colvarstr(self):
        '''no docstr'''
        
        nlist = []
        for i,j in enumerate(self.collvars):
            if i == 0 :
                nlist = self.vardict[j]
            else:
                newlist = []
                for k in nlist:
                    for l in self.vardict[j]:
                        name ="%s_%s"%(k,l)
                        #print name
                        newlist.append(name) 
                nlist = newlist
        
        return nlist
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        